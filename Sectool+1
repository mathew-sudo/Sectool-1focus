#!/bin/bash
# Sectool+1 Installer Script for Termux
# This script is designed to automate the setup of a security tool environment in Termux

echo "====================================="
echo "Termux Security Tool Installer"
echo "====================================="
echo ""

# Initialize error log
ERROR_LOG="install_errors.log"
> "$ERROR_LOG"

# Enhanced logging function
log_install() {
    local tool="$1"
    local success="$2"
    local error_msg="$3"
    
    if [ "$success" = "true" ]; then
        echo "✓ $tool installed successfully."
    else
        echo "✗ Error installing $tool." | tee -a "$ERROR_LOG"
        [ -n "$error_msg" ] && echo "  Error: $error_msg" | tee -a "$ERROR_LOG"
    fi
    echo ""
}

echo "Updating package lists..."
pkg update -y
echo ""

echo "Setting up environment for root tools..."
pkg install proot -y

echo "Setting up PRoot..."
mkdir -p $HOME/.termux/boot
cat > $HOME/.termux/boot/proot_startup.sh << 'EOF'
/data/data/com.termux/files/usr/bin/bash
proot --link2symlink -0 -l -p -L -H $HOME/.termux/boot/fake_root_shell.sh
EOF

cat > $HOME/.termux/boot/fake_root_shell.sh << 'EOF'
/data/data/com.termux/files/usr/bin/bash
echo "PRoot is active - fake root environment enabled"
export PATH=$PATH:/system/bin:/system/xbin
export LD_LIBRARY_PATH=/system/lib
alias su="echo Already root!"
PS1="# "
$@
EOF

chmod +x $HOME/.termux/boot/*.sh
echo "PRoot setup complete."
echo ""

# Function for repeated pkg install logic
install_pkg_tool() {
    local tool="$1"
    echo "Installing $tool..."
    if pkg install "$tool" -y >/dev/null 2>&1; then
        log_install "$tool" "true"
        return 0
    else
        log_install "$tool" "false" "Package installation failed"
        return 1
    fi
}

# Enhanced git clone function
install_git_tool() {
    local tool="$1"
    local repo_url="$2"
    local post_install="$3"
    
    echo "Installing $tool..."
    if git clone "$repo_url" >/dev/null 2>&1; then
        if [ -n "$post_install" ]; then
            eval "$post_install" >/dev/null 2>&1
            if [ $? -eq 0 ]; then
                log_install "$tool" "true"
            else
                log_install "$tool" "false" "Post-install commands failed"
            fi
        else
            log_install "$tool" "true"
        fi
    else
        log_install "$tool" "false" "Git clone failed"
    fi
}

# Array of tools to install only once (no custom logic required)
tools=(
    unstable-repo metasploit hydra root-repo aircrack-ng hashcat john crunch medusa bettercap dirb reaver perl python ruby golang rust kotlin php clang r-base apktool dex2jar openjdk-17 android-tools jadx tigervnc x11-repo xfce4 lxqt xorg-server xfce4-terminal wireshark-gtk firefox geany gimp inkscape vlc blender libreoffice eclipse nodejs tsu curl busybox ncrack qt5-base chntpw ophcrack samdump2 tshark netcat ettercap hping3 masscan foremost scalpel exiftool binwalk ddrescue testdisk clamav yara radare2 procps termux-api wget openssh
)

for tool in "${tools[@]}"; do
    install_pkg_tool "$tool"
done

# Custom install logic for tools that require more than pkg install

# Installing Metasploit Framework...
echo "Installing Metasploit Framework..."
if pkg install unstable-repo -y && pkg install metasploit -y; then
    log_install "Metasploit Framework" "true"
else
    log_install "Metasploit Framework" "false" "Package installation failed"
fi

# Installing Kraken...
install_git_tool "Kraken" "https://github.com/Kraken-Project/Kraken.git" "cd Kraken && pip install -r requirements.txt && cd .."

# Installing Wifite...
install_git_tool "Wifite" "https://github.com/derv82/wifite2.git" "cd wifite2 && pip install -r requirements.txt && cd .."

# Installing Nikto...
echo "Installing Nikto..."
if pkg install perl -y && cpan install Net::SSLeay && git clone https://github.com/sullo/nikto.git; then
    log_install "Nikto" "true"
else
    log_install "Nikto" "false" "Perl dependencies or git clone failed"
fi

# Installing Slowloris...
install_git_tool "Slowloris" "https://github.com/gkbrk/slowloris.git"

# Installing BeEF XSS Framework...
install_git_tool "BeEF XSS Framework" "https://github.com/beefproject/beef.git" "cd beef && bundle install"

# Installing Commix...
install_git_tool "Commix" "https://github.com/commixproject/commix.git"

# Installing Reaver...
pkg install reaver -y
if [ $? -eq 0 ]; then
    echo "Reaver installed successfully."
else
    echo "Error installing Reaver." | tee -a install_errors.log
fi
echo ""

# Installing Sherlock...
pkg install git python -y && git clone https://github.com/sherlock-project/sherlock.git && cd sherlock && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Sherlock installed successfully."
else
    echo "Error installing Sherlock." | tee -a install_errors.log
fi
echo ""

# Installing Zphisher...
pkg install git php openssh -y && git clone https://github.com/htr-tech/zphisher.git
if [ $? -eq 0 ]; then
    echo "Zphisher installed successfully."
else
    echo "Error installing Zphisher." | tee -a install_errors.log
fi
echo ""

# Installing MSFvenom Payload Creator...
pkg install metasploit-framework -y
if [ $? -eq 0 ]; then
    echo "MSFvenom Payload Creator installed successfully."
else
    echo "Error installing MSFvenom Payload Creator."
fi
echo ""

# Installing ReconDog...
pkg install git python -y && git clone https://github.com/s0md3v/ReconDog.git && cd ReconDog && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "ReconDog installed successfully."
else
    echo "Error installing ReconDog." | tee -a install_errors.log
fi
echo ""

# Installing RouterSploit...
pkg install git python -y && git clone https://github.com/threat9/routersploit.git && cd routersploit && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "RouterSploit installed successfully."
else
    echo "Error installing RouterSploit." | tee -a install_errors.log
fi
echo ""

# Installing Python 3...
pkg install python -y
if [ $? -eq 0 ]; then
    echo "Python 3 installed successfully."
else
    echo "Error installing Python 3."
fi
echo ""

# Installing Ruby...
pkg install ruby -y
if [ $? -eq 0 ]; then
    echo "Ruby installed successfully."
else
    echo "Error installing Ruby."
fi
echo ""

# Installing Go...
pkg install golang -y
if [ $? -eq 0 ]; then
    echo "Go installed successfully."
else
    echo "Error installing Go."
fi
echo ""

# Installing Rust...
pkg install rust -y
if [ $? -eq 0 ]; then
    echo "Rust installed successfully."
else
    echo "Error installing Rust."
fi
echo ""

# Installing Kotlin...
pkg install kotlin -y
if [ $? -eq 0 ]; then
    echo "Kotlin installed successfully."
else
    echo "Error installing Kotlin."
fi
echo ""

# Installing PHP...
pkg install php -y
if [ $? -eq 0 ]; then
    echo "PHP installed successfully."
else
    echo "Error installing PHP."
fi
echo ""

# Installing Perl...
pkg install perl -y
if [ $? -eq 0 ]; then
    echo "Perl installed successfully."
else
    echo "Error installing Perl."
fi
echo ""

# Installing C/C++ Development...
pkg install clang -y
if [ $? -eq 0 ]; then
    echo "C/C++ Development installed successfully."
else
    echo "Error installing C/C++ Development."
fi
echo ""

# Installing R Language...
pkg install r-base -y
if [ $? -eq 0 ]; then
    echo "R Language installed successfully."
else
    echo "Error installing R Language."
fi
echo ""

# Installing APKTool...
pkg install apktool -y
if [ $? -eq 0 ]; then
    echo "APKTool installed successfully."
else
    echo "Error installing APKTool."
fi
echo ""

# Installing dex2jar...
pkg install dex2jar -y
if [ $? -eq 0 ]; then
    echo "dex2jar installed successfully."
else
    echo "Error installing dex2jar."
fi
echo ""

# Installing JDK Tools...
pkg install openjdk-17 -y
if [ $? -eq 0 ]; then
    echo "JDK Tools installed successfully."
else
    echo "Error installing JDK Tools."
fi
echo ""

# Installing Android Tools...
pkg install android-tools -y
if [ $? -eq 0 ]; then
    echo "Android Tools installed successfully."
else
    echo "Error installing Android Tools."
fi
echo ""

# Installing JADX...
pkg install jadx -y
if [ $? -eq 0 ]; then
    echo "JADX installed successfully."
else
    echo "Error installing JADX."
fi
echo ""

# Installing Frida...
pip install frida-tools
if [ $? -eq 0 ]; then
    echo "Frida installed successfully."
else
    echo "Error installing Frida."
fi
echo ""

# Installing Objection...
pip install objection
if [ $? -eq 0 ]; then
    echo "Objection installed successfully."
else
    echo "Error installing Objection."
fi
echo ""

# Installing Mobile Security Framework...
pkg install git python -y && git clone https://github.com/MobSF/Mobile-Security-Framework-MobSF.git && cd Mobile-Security-Framework-MobSF && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Mobile Security Framework installed successfully."
else
    echo "Error installing Mobile Security Framework."
fi
echo ""

# Installing Drozer...
pip install drozer
if [ $? -eq 0 ]; then
    echo "Drozer installed successfully."
else
    echo "Error installing Drozer."
fi
echo ""

# Installing Flutter...
pkg install flutter -y
if [ $? -eq 0 ]; then
    echo "Flutter installed successfully."
else
    echo "Error installing Flutter."
fi
echo ""

# Installing JShell...
pkg install openjdk-17 -y
if [ $? -eq 0 ]; then
    echo "JShell installed successfully."
else
    echo "Error installing JShell."
fi
echo ""

# Installing Kali Linux with XFCE...
pkg install wget -y && wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux kali --full
if [ $? -eq 0 ]; then
    echo "Kali Linux with XFCE installed successfully."
else
    echo "Error installing Kali Linux with XFCE."
fi
echo ""

# Installing TigerVNC Server...
pkg install tigervnc -y
if [ $? -eq 0 ]; then
    echo "TigerVNC Server installed successfully."
else
    echo "Error installing TigerVNC Server."
fi
echo ""

# Installing X11 Repository...
pkg install x11-repo -y
if [ $? -eq 0 ]; then
    echo "X11 Repository installed successfully."
else
    echo "Error installing X11 Repository."
fi
echo ""

# Installing XFCE4 Desktop...
pkg install x11-repo -y && pkg install xfce4 -y
if [ $? -eq 0 ]; then
    echo "XFCE4 Desktop installed successfully."
else
    echo "Error installing XFCE4 Desktop."
fi
echo ""

# Installing LXQt Desktop...
pkg install x11-repo -y && pkg install lxqt -y
if [ $? -eq 0 ]; then
    echo "LXQt Desktop installed successfully."
else
    echo "Error installing LXQt Desktop."
fi
echo ""

# Installing Xorg Server...
pkg install x11-repo -y && pkg install xorg-server -y
if [ $? -eq 0 ]; then
    echo "Xorg Server installed successfully."
else
    echo "Error installing Xorg Server."
fi
echo ""

# Installing XFCE4 Terminal...
pkg install x11-repo -y && pkg install xfce4-terminal -y
if [ $? -eq 0 ]; then
    echo "XFCE4 Terminal installed successfully."
else
    echo "Error installing XFCE4 Terminal."
fi
echo ""

# Installing Wireshark GTK...
pkg install x11-repo -y && pkg install wireshark-gtk -y
if [ $? -eq 0 ]; then
    echo "Wireshark GTK installed successfully."
else
    echo "Error installing Wireshark GTK."
fi
echo ""

# Installing Firefox Browser...
pkg install x11-repo -y && pkg install firefox -y
if [ $? -eq 0 ]; then
    echo "Firefox Browser installed successfully."
else
    echo "Error installing Firefox Browser."
fi
echo ""

# Installing Geany IDE...
pkg install x11-repo -y && pkg install geany -y
if [ $? -eq 0 ]; then
    echo "Geany IDE installed successfully."
else
    echo "Error installing Geany IDE."
fi
echo ""

# Installing GIMP...
pkg install x11-repo -y && pkg install gimp -y
if [ $? -eq 0 ]; then
    echo "GIMP installed successfully."
else
    echo "Error installing GIMP."
fi
echo ""

# Installing Inkscape...
pkg install x11-repo -y && pkg install inkscape -y
if [ $? -eq 0 ]; then
    echo "Inkscape installed successfully."
else
    echo "Error installing Inkscape."
fi
echo ""

# Installing VLC Media Player...
pkg install x11-repo -y && pkg install vlc -y
if [ $? -eq 0 ]; then
    echo "VLC Media Player installed successfully."
else
    echo "Error installing VLC Media Player."
fi
echo ""

# Installing Blender...
pkg install x11-repo -y && pkg install blender -y
if [ $? -eq 0 ]; then
    echo "Blender installed successfully."
else
    echo "Error installing Blender."
fi
echo ""

# Installing LibreOffice...
pkg install x11-repo -y && pkg install libreoffice -y
if [ $? -eq 0 ]; then
    echo "LibreOffice installed successfully."
else
    echo "Error installing LibreOffice."
fi
echo ""

# Installing Eclipse IDE...
pkg install x11-repo -y && pkg install openjdk-17 eclipse -y
if [ $? -eq 0 ]; then
    echo "Eclipse IDE installed successfully."
else
    echo "Error installing Eclipse IDE."
fi
echo ""

# Installing VNC Server Setup...
pkg install tigervnc -y && mkdir -p ~/.vnc && echo '#!/data/data/com.termux/files/usr/bin/sh\nxrdb $HOME/.Xresources\nstartxfce4 &' > ~/.vnc/xstartup && chmod +x ~/.vnc/xstartup
if [ $? -eq 0 ]; then
    echo "VNC Server Setup installed successfully."
else
    echo "Error installing VNC Server Setup."
fi
echo ""

# Installing VS Code Server...
pkg install nodejs -y && npm install -g code-server
if [ $? -eq 0 ]; then
    echo "VS Code Server installed successfully."
else
    echo "Error installing VS Code Server."
fi
echo ""

# Installing Termux with Root Access...
pkg install tsu -y
if [ $? -eq 0 ]; then
    echo "Termux with Root Access installed successfully."
else
    echo "Error installing Termux with Root Access."
fi
echo ""

# Installing Magisk for Termux...
pkg install curl -y && curl -sL https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/repo-fix.sh | bash
if [ $? -eq 0 ]; then
    echo "Magisk for Termux installed successfully."
else
    echo "Error installing Magisk for Termux."
fi
echo ""

# Installing Termux Sudo...
pkg install git -y && git clone https://gitlab.com/st42/termux-sudo.git && cd termux-sudo && pkg install ncurses-utils -y && cat sudo > /data/data/com.termux/files/usr/bin/sudo && chmod 700 /data/data/com.termux/files/usr/bin/sudo
if [ $? -eq 0 ]; then
    echo "Termux Sudo installed successfully."
else
    echo "Error installing Termux Sudo."
fi
echo ""

# Installing Termux Root Packages...
pkg install root-repo -y
if [ $? -eq 0 ]; then
    echo "Termux Root Packages installed successfully."
else
    echo "Error installing Termux Root Packages."
fi
echo ""

# Installing SuperSU...
pkg install wget -y && wget https://download.chainfire.eu/1220/SuperSU/SR5-SuperSU-v2.82-SR5-20171001224502.zip -O supersu.zip && unzip supersu.zip && cd supersu && sh update-binary
if [ $? -eq 0 ]; then
    echo "SuperSU installed successfully."
else
    echo "Error installing SuperSU."
fi
echo ""

# Installing BusyBox...
pkg install busybox -y
if [ $? -eq 0 ]; then
    echo "BusyBox installed successfully."
else
    echo "Error installing BusyBox."
fi
echo ""

# Installing Root Repository...
pkg install root-repo -y
if [ $? -eq 0 ]; then
    echo "Root Repository installed successfully."
else
    echo "Error installing Root Repository."
fi
echo ""

# Installing ADB with Root...
pkg install android-tools -y && pkg install tsu -y
if [ $? -eq 0 ]; then
    echo "ADB with Root installed successfully."
else
    echo "Error installing ADB with Root."
fi
echo ""

# Installing Magisk Module Manager...
pkg install git python -y && git clone https://github.com/Magisk-Modules-Repo/terminal_magisk_module_manager.git && cd terminal_magisk_module_manager && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Magisk Module Manager installed successfully."
else
    echo "Error installing Magisk Module Manager."
fi
echo ""

# Installing MTK Tools...
pkg install git -y && git clone https://github.com/bkerler/mtkclient && cd mtkclient && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "MTK Tools installed successfully."
else
    echo "Error installing MTK Tools."
fi
echo ""

# Installing Termux API with Root...
pkg install termux-api -y && pkg install tsu -y
if [ $? -eq 0 ]; then
    echo "Termux API with Root installed successfully."
else
    echo "Error installing Termux API with Root."
fi
echo ""

# Installing Magisk Manager...
pkg install wget -y && wget https://github.com/topjohnwu/Magisk/releases/download/v26.3/Magisk-v26.3.apk -O magisk.apk && chmod +x magisk.apk
if [ $? -eq 0 ]; then
    echo "Magisk Manager installed successfully."
else
    echo "Error installing Magisk Manager."
fi
echo ""

# Installing Magisk Systemless...
pkg install wget -y && wget https://github.com/topjohnwu/Magisk/releases/download/v26.3/Magisk-v26.3.apk -O magisk.apk && chmod +x magisk.apk
if [ $? -eq 0 ]; then
    echo "Magisk Systemless installed successfully."
else
    echo "Error installing Magisk Systemless."
fi
echo ""

# Installing Android SU Binary...
pkg install git -y && git clone https://github.com/topjohnwu/Magisk.git && cd Magisk/native/jni && ndk-build
if [ $? -eq 0 ]; then
    echo "Android SU Binary installed successfully."
else
    echo "Error installing Android SU Binary."
fi
echo ""

# Installing Popular Magisk Modules...
pkg install git -y && mkdir -p magisk_modules && cd magisk_modules && git clone https://github.com/Zackptg5/MMT-Extended.git && git clone https://github.com/Magisk-Modules-Repo/MagiskHide-Props-Config.git && git clone https://github.com/Magisk-Modules-Repo/wifi-bonding.git
if [ $? -eq 0 ]; then
    echo "Popular Magisk Modules installed successfully."
else
    echo "Error installing Popular Magisk Modules."
fi
echo ""

# Installing TWRP Recovery...
pkg install wget -y && mkdir -p twrp && cd twrp && wget https://dl.twrp.me/twrp-installer-3.7.0_11-0-unified.zip -O twrp-installer.zip
if [ $? -eq 0 ]; then
    echo "TWRP Recovery installed successfully."
else
    echo "Error installing TWRP Recovery."
fi
echo ""

# Installing LineageOS Recovery...
pkg install wget -y && mkdir -p lineage && cd lineage && wget https://download.lineageos.org/tools/extract_utils.sh -O extract_utils.sh && chmod +x extract_utils.sh
if [ $? -eq 0 ]; then
    echo "LineageOS Recovery installed successfully."
else
    echo "Error installing LineageOS Recovery."
fi
echo ""

# Installing Root Checker...
pkg install wget -y && wget https://play.google.com/store/apps/details?id=com.joeykrim.rootcheck -O root-checker.apk
if [ $? -eq 0 ]; then
    echo "Root Checker installed successfully."
else
    echo "Error installing Root Checker."
fi
echo ""

# Installing BusyBox for Android...
pkg install wget -y && wget https://github.com/meefik/busybox/releases/download/1.33.1-1/busybox-v1.33.1-1.apk -O busybox.apk && chmod +x busybox.apk
if [ $? -eq 0 ]; then
    echo "BusyBox for Android installed successfully."
else
    echo "Error installing BusyBox for Android."
fi
echo ""

# Installing ADB & Fastboot...
pkg install android-tools -y
if [ $? -eq 0 ]; then
    echo "ADB & Fastboot installed successfully."
else
    echo "Error installing ADB & Fastboot."
fi
echo ""

# Installing EdXposed Framework...
pkg install wget -y && wget https://github.com/ElderDrivers/EdXposed/releases/download/v0.5.2.2/riru-edxposed-v0.5.2.2_4577-master-release.zip -O edxposed.zip
if [ $? -eq 0 ]; then
    echo "EdXposed Framework installed successfully."
else
    echo "Error installing EdXposed Framework."
fi
echo ""

# Installing LSPosed Framework...
pkg install wget -y && wget https://github.com/LSPosed/LSPosed/releases/download/v1.8.6/LSPosed-v1.8.6-6860-zygisk-release.zip -O lsposed.zip
if [ $? -eq 0 ]; then
    echo "LSPosed Framework installed successfully."
else
    echo "Error installing LSPosed Framework."
fi
echo ""

# Installing SuperUser Access...
pkg install git -y && git clone https://github.com/koush/Superuser.git && cd Superuser && ./gradlew assembleRelease
if [ $? -eq 0 ]; then
    echo "SuperUser Access installed successfully."
else
    echo "Error installing SuperUser Access."
fi
echo ""

# Installing Root Genius...
pkg install wget -y && wget https://rootgenius.com/download -O root-genius.apk && chmod +x root-genius.apk
if [ $? -eq 0 ]; then
    echo "Root Genius installed successfully."
else
    echo "Error installing Root Genius."
fi
echo ""

# Installing Universal AndRoot...
pkg install wget -y && wget https://universalandroot.net/download -O universal-androot.apk && chmod +x universal-androot.apk
if [ $? -eq 0 ]; then
    echo "Universal AndRoot installed successfully."
else
    echo "Error installing Universal AndRoot."
fi
echo ""

# Installing Root Master...
pkg install wget -y && wget https://rootmaster.net/download -O root-master.apk && chmod +x root-master.apk
if [ $? -eq 0 ]; then
    echo "Root Master installed successfully."
else
    echo "Error installing Root Master."
fi
echo ""

# Installing SRS Root...
pkg install wget -y && wget https://srsroot.com/download -O srsroot.apk && chmod +x srsroot.apk
if [ $? -eq 0 ]; then
    echo "SRS Root installed successfully."
else
    echo "Error installing SRS Root."
fi
echo ""

# Installing Root Explorer...
pkg install wget -y && wget https://rootexplorer.co/download -O root-explorer.apk && chmod +x root-explorer.apk
if [ $? -eq 0 ]; then
    echo "Root Explorer installed successfully."
else
    echo "Error installing Root Explorer."
fi
echo ""

# Installing Terminal Emulator...
pkg install wget -y && wget https://f-droid.org/repo/jackpal.androidterm_72.apk -O terminal-emulator.apk && chmod +x terminal-emulator.apk
if [ $? -eq 0 ]; then
    echo "Terminal Emulator installed successfully."
else
    echo "Error installing Terminal Emulator."
fi
echo ""

# Installing Root Browser...
pkg install wget -y && wget https://rootbrowser.co/download -O root-browser.apk && chmod +x root-browser.apk
if [ $? -eq 0 ]; then
    echo "Root Browser installed successfully."
else
    echo "Error installing Root Browser."
fi
echo ""

# Installing Samsung Root Toolkit...
pkg install wget -y && wget https://github.com/samsung-root/toolkit/releases/latest/download/samsung-root-toolkit.zip -O samsung-root-toolkit.zip
if [ $? -eq 0 ]; then
    echo "Samsung Root Toolkit installed successfully."
else
    echo "Error installing Samsung Root Toolkit."
fi
echo ""

# Installing Hydra...
pkg install hydra -y
if [ $? -eq 0 ]; then
    echo "Hydra installed successfully."
else
    echo "Error installing Hydra."
fi
echo ""

# Installing John the Ripper...
pkg install john -y
if [ $? -eq 0 ]; then
    echo "John the Ripper installed successfully."
else
    echo "Error installing John the Ripper."
fi
echo ""

# Installing Hashcat...
pkg install hashcat -y
if [ $? -eq 0 ]; then
    echo "Hashcat installed successfully."
else
    echo "Error installing Hashcat."
fi
echo ""

# Installing Crunch...
pkg install crunch -y
if [ $? -eq 0 ]; then
    echo "Crunch installed successfully."
else
    echo "Error installing Crunch."
fi
echo ""

# Installing CeWL...
pkg install ruby -y && gem install cewl
if [ $? -eq 0 ]; then
    echo "CeWL installed successfully."
else
    echo "Error installing CeWL."
fi
echo ""

# Installing Medusa...
pkg install medusa -y
if [ $? -eq 0 ]; then
    echo "Medusa installed successfully."
else
    echo "Error installing Medusa."
fi
echo ""

# Installing Ncrack...
pkg install ncrack -y
if [ $? -eq 0 ]; then
    echo "Ncrack installed successfully."
else
    echo "Error installing Ncrack."
fi
echo ""

# Installing Credmap...
pkg install git -y && pkg install python -y && git clone https://github.com/lightos/credmap.git && cd credmap && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Credmap installed successfully."
else
    echo "Error installing Credmap."
fi
echo ""

# Installing Johnny...
pkg install qt5-base -y && git clone https://github.com/openwall/johnny.git && cd johnny && qmake && make
if [ $? -eq 0 ]; then
    echo "Johnny installed successfully."
else
    echo "Error installing Johnny."
fi
echo ""

# Installing Wordlistctl...
pkg install git -y && git clone https://github.com/BlackArch/wordlistctl.git && cd wordlistctl && chmod +x wordlistctl.py
if [ $? -eq 0 ]; then
    echo "Wordlistctl installed successfully."
else
    echo "Error installing Wordlistctl."
fi
echo ""

# Installing CUPP...
pkg install git -y && pkg install python -y && git clone https://github.com/Mebus/cupp.git && cd cupp && chmod +x cupp.py
if [ $? -eq 0 ]; then
    echo "CUPP installed successfully."
else
    echo "Error installing CUPP."
fi
echo ""

# Installing BruteSpray...
pkg install git -y && pkg install python -y && git clone https://github.com/x90skysn3k/brutespray.git && cd brutespray && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "BruteSpray installed successfully."
else
    echo "Error installing BruteSpray."
fi
echo ""

# Installing Mimikatz...
pkg install git -y && git clone https://github.com/gentilkiwi/mimikatz.git
if [ $? -eq 0 ]; then
    echo "Mimikatz installed successfully."
else
    echo "Error installing Mimikatz."
fi
echo ""

# Installing Patator...
pkg install git -y && pkg install python -y && git clone https://github.com/lanjelot/patator.git && cd patator && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Patator installed successfully."
else
    echo "Error installing Patator."
fi
echo ""

# Installing THC Hydra GUI...
pkg install git -y && pkg install python -y && git clone https://github.com/KALILINUXTRICKSYT/eashydra.git && cd eashydra && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "THC Hydra GUI installed successfully."
else
    echo "Error installing THC Hydra GUI."
fi
echo ""

# At the end, print a summary of failed installs if any
if [ -s "$ERROR_LOG" ]; then
    echo "====================================="
    echo "Some tools failed to install:"
    cat "$ERROR_LOG"
    echo "Please review the errors above."
    echo "====================================="
else
    echo "All tools installed successfully!"
    rm -f "$ERROR_LOG"
fi

# Cleaning up
pkg clean
echo ""
echo "====================================="
echo "Installation complete!"
echo "====================================="
else
    echo "Error installing Patator."
fi
echo ""

# Installing THC Hydra GUI...
pkg install git -y && pkg install python -y && git clone https://github.com/KALILINUXTRICKSYT/eashydra.git && cd eashydra && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "THC Hydra GUI installed successfully."
else
    echo "Error installing THC Hydra GUI."
fi
echo ""

# At the end, print a summary of failed installs if any
if [ -s "$ERROR_LOG" ]; then
    echo "====================================="
    echo "Some tools failed to install:"
    cat "$ERROR_LOG"
    echo "Please review the errors above."
    echo "====================================="
else
    echo "All tools installed successfully!"
    rm -f "$ERROR_LOG"
fi

# Cleaning up
pkg clean
echo ""
echo "====================================="
echo "Installation complete!"
echo "====================================="
